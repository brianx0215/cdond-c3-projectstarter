version: 2.1

orbs:
  slack: circleci/slack@4.2.0
  aws-cli: circleci/aws-cli@1.3.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name backend-${CIRCLE_WORKFLOW_ID:0:7}
            aws cloudformation delete-stack --stack-name frontend-${CIRCLE_WORKFLOW_ID:0:7}

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS = `curl -H "token: ${MEMSTASH_TOKEN}" --request GET https://api.memstash.io/values/npm_migration_${CIRCLE_WORKFLOW_ID:0:7}`
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi

  notify-when-fail:
    description: Push notification to slack when job is failed.
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1
        
jobs:
  build-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_build]
      - run:
          name: Build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend_build
      - notify-when-fail

  build-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Build backend
          command: |
            cd backend
            npm i
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend_build
      - notify-when-fail    

  test-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm i
            npm run test
      - notify-when-fail

  test-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm i
            npm run test
      - notify-when-fail
            
  scan-frontend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [frontend_build]
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm audit fix --audit-level=critical --force
      - notify-when-fail

  scan-backend:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - restore_cache:
          keys: [backend_build]
      - run:
          name: Scan backend
          command: |
            cd backend
            npm audit fix --audit-level=critical --force
      - notify-when-fail

  deploy-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            sudo apt install -y tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=udapeople \
              --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Ensure front-end infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/frontend.yml \
              --tags project=udapeople \
              --stack-name udapeople-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_IP=`aws ec2 describe-instances \
              --filters Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7} \
              --query Reservations[*].Instances[*].[InstanceId] \
              --output text`
            echo ${BACKEND_IP} >> .circleci\ansible\inventory.txt \
            curl -H "Content-Type: text/plain" \
              -H "token: ${MEMSTASH_TOKEN}" \
              --request PUT \
              --data "${BACKEND_IP}" https://api.memstash.io/values/${CIRCLE_WORKFLOW_ID:0:7}
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      # Here's where you will add some code to rollback on failure
      - notify-when-fail   
      - destroy-environment 

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - "58:13:d8:a6:51:ab:82:23:72:5a:af:ac:35:ea:97:dc:78:03:3b:f3"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            sudo apt update -y
            curl -sL https://deb.nodesource.com/setup_15.x | sudo -E bash -
            sudo apt install -y tar gzip curl python3 nodejs ansible
            sudo npm install pm2 -g
      - run:
          name: Configure server
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook configure-server.yml --inventory-file=inventory.txt    
      - notify-when-fail
      - destroy-environment 

  run-migrations:
    docker:
      - image: cimg/node:lts
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Run migrations
          command: |
            cd backend
            npm i
            npm run migrations > /tmp/npm_migration.log
      - run:
          name: Send migration results to memstash
          command: |
            if [[`grep "has been executed successfully" /tmp/npm_migration.log | wc -l` -gt 0]] ; then
              curl -H "Content-Type: text/plain" \
                -H "token: ${MEMSTASH_TOKEN}" \
                --request PUT \
                --data "1" https://api.memstash.io/values/npm_migration_${CIRCLE_WORKFLOW_ID:0:7}
              echo "Migration Complete"
            else
              echo "Migration Failed"
              exit 1
            fi
      - notify-when-fail      
      - destroy-environment
      - revert-migrations  

  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      - notify-when-fail
      - destroy-environment
      - revert-migrations 
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/install
      - add_ssh_keys:
          fingerprints:
            - "58:13:d8:a6:51:ab:82:23:72:5a:af:ac:35:ea:97:dc:78:03:3b:f3"
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      - notify-when-fail
      - destroy-environment
      - revert-migrations   

  smoke-test:
    docker:
      - image: cimg/base:stable 
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
      - notify-when-fail
      - destroy-environment
      - revert-migrations 

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - aws-cli/install
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      - notify-when-fail
      - destroy-environment
      - revert-migrations 
      
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure:
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [test-feature-branch]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]